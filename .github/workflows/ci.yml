name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: justnews
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d justnews" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      POSTGRES_HOST: localhost
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: justnews
      LLAMA_3_70B_PATH: ./models/llama-3-70b-instruct
      LLAMA_3_8B_PATH: ./models/llama-3-8b-instruct
      MISTRAL_7B_PATH: ./models/mistral-7b-instruct-v0.2
      SENTENCE_TRANSFORMER_MODEL: all-MiniLM-L6-v2
      SYNTHESIZER_FEEDBACK_LOG: ./feedback_synthesizer.log
      CRITIC_FEEDBACK_LOG: ./feedback_critic.log
      MEMORY_FEEDBACK_LOG: ./feedback_memory.log
      ANALYST_FEEDBACK_LOG: ./feedback_analyst.log
      FACT_CHECKER_FEEDBACK_LOG: ./feedback_fact_checker.log
      SCOUT_FEEDBACK_LOG: ./feedback_scout.log
      CHIEF_EDITOR_FEEDBACK_LOG: ./feedback_chief_editor.log
      SERPAPI_KEY: dummy
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libpq-dev
      - name: Install Docker Compose V2
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r agents/synthesizer/requirements.txt
          pip install -r agents/critic/requirements.txt
          pip install -r agents/memory/requirements.txt
          pip install -r agents/analyst/requirements.txt
          pip install -r agents/fact_checker/requirements.txt
          pip install -r agents/scout/requirements.txt
          pip install -r agents/chief_editor/requirements.txt
          pip install -r tests/requirements.txt
      - name: Install pgvector in Postgres container
        run: |
          docker exec $(docker ps -qf "ancestor=postgres:16") bash -c "apt-get update && apt-get install -y postgresql-16-pgvector"
      - name: Enable pgvector extension
        run: |
          psql -h localhost -U user -d justnews -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
          PGPASSWORD: password
      - name: Run DB migrations
        run: |
          psql -h localhost -U user -d justnews -f agents/memory/db_migrations/001_create_articles_table.sql
          psql -h localhost -U user -d justnews -f agents/memory/db_migrations/002_create_training_examples_table.sql
          psql -h localhost -U user -d justnews -f agents/memory/db_migrations/003_create_article_vectors_table.sql
        env:
          PGPASSWORD: password
      - name: Lint with ruff
        run: |
          pip install ruff
          ruff check .
      - name: Run unit tests
        run: pytest tests --maxfail=2 --disable-warnings -v
      - name: Build and start services for integration tests
        run: |
          # docker compose up -d db memory mcp_bus chief_editor scout fact_checker analyst synthesizer critic
          # Wait for containers to be up before health checks
          # sleep 5
          docker compose up -d db memory scout fact_checker analyst synthesizer critic
          sleep 5

      - name: Print docker compose ps
        run: docker compose ps -a

      - name: Print last 100 lines of logs for all containers
        run: docker compose logs --tail=100

      # - name: Print mcp_bus logs
      #   run: docker compose logs mcp_bus

      # - name: Print chief_editor logs
      #   run: docker compose logs chief_editor

      # - name: Health check mcp_bus
      #   run: |
      #     for i in {1..20}; do
      #       if curl -sf http://localhost:8000/health; then
      #         echo "mcp_bus is healthy."
      #         break
      #       else
      #         echo "Waiting for mcp_bus on port 8000..."
      #         sleep 2
      #       fi
      #       if [ $i -eq 20 ]; then
      #         echo "mcp_bus failed health check.";
      #         docker compose logs mcp_bus
      #         exit 1
      #       fi
      #     done

      # - name: Health check chief_editor
      #   run: |
      #     for i in {1..20}; do
      #       if curl -sf http://localhost:8001/health; then
      #         echo "chief_editor is healthy."
      #         break
      #       else
      #         echo "Waiting for chief_editor on port 8001..."
      #         sleep 2
      #       fi
      #       if [ $i -eq 20 ]; then
      #         echo "chief_editor failed health check.";
      #         docker compose logs chief_editor
      #         exit 1
      #       fi
      #     done

      # - name: Run integration tests
      #   run: pytest tests/test_integration_agents.py

      - name: Print docker-compose logs (always)
        if: always()
        run: docker compose logs


  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push all agent images
        run: |
          for agent in chief_editor scout fact_checker analyst synthesizer critic memory mcp_bus; do
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/justnews-${agent}:latest ./agents/${agent} || docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/justnews-${agent}:latest ./mcp_bus
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/justnews-${agent}:latest
          done
      - name: Build and push db image
        run: |
          docker pull postgres:16
          docker tag postgres:16 ${{ secrets.DOCKERHUB_USERNAME }}/justnews-db:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/justnews-db:latest

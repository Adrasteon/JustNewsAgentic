"""Standardize agent structure helper

Usage:
  python scripts/standardize_agent_structure.py [--create-wrappers]

This script scans the `agents/` directory and reports which agent folders already
conform to the recommended structure and which are missing files. With
`--create-wrappers` it will create a safe, non-destructive `main.py` wrapper in
agent directories that are missing one. The generated wrapper attempts to
expose an `app` symbol (ASGI/FastAPI) from common candidate modules, or else
creates a harmless placeholder app if FastAPI is available.

The recommended canonical structure for agents is:
  - main.py            # ASGI entrypoint exposing `app` (uvicorn targets this)
  - tools.py           # helper functions used by the agent
  - <agent>_engine.py  # agent-specific model/engine implementation(s)
  - models/            # model artifacts cached locally (optional)

This script performs a dry-run by default and will not overwrite any existing
files unless `--create-wrappers` is specified.
"""

from __future__ import annotations

import argparse
from pathlib import Path
from typing import List, Dict

AGENTS_DIR = Path(__file__).resolve().parents[1] / 'agents'

WRAPPER_TEMPLATE = '''# Auto-generated safe wrapper main.py
"""
This wrapper was generated by scripts/standardize_agent_structure.py
It attempts to locate and expose an `app` object from commonly-used module
names in the agent package. If no `app` is found, the wrapper will expose a
minimal placeholder FastAPI app (if FastAPI is installed) to avoid import
errors when running `uvicorn agents.<agent>.main:app`.
"""
import importlib
import pkgutil
import os

__all__ = ['app']

def _find_app():
    candidates = ['main', 'main_v2', 'newsreader_agent', 'balancer', 'app', 'server']
    pkg_dir = os.path.dirname(__file__)
    for name in candidates:
        try:
            mod = importlib.import_module(f'.{name}', __package__)
            if hasattr(mod, 'app'):
                return getattr(mod, 'app')
        except Exception:
            continue

    # fallback: scan all modules in the package for an `app` symbol
    try:
        for finder, modname, ispkg in pkgutil.iter_modules([pkg_dir]):
            if modname.startswith('_'):
                continue
            try:
                mod = importlib.import_module(f'.{modname}', __package__)
                if hasattr(mod, 'app'):
                    return getattr(mod, 'app')
            except Exception:
                continue
    except Exception:
        pass

    # no app found â€” try to provide a harmless FastAPI placeholder if available
    try:
        from fastapi import FastAPI

        _app = FastAPI()

        @_app.get('/_placeholder')
        def _placeholder():
            return {'status': 'placeholder', 'note': 'auto-generated wrapper'}

        return _app
    except Exception:
        # last resort: provide a dummy object to avoid attribute errors
        class _DummyApp:
            pass

        return _DummyApp()


app = _find_app()
'''


def scan_agents(agents_dir: Path) -> Dict[str, Dict[str, bool]]:
    results: Dict[str, Dict[str, bool]] = {}
    if not agents_dir.exists():
        raise FileNotFoundError(f'Agents directory not found: {agents_dir}')

    for child in sorted(agents_dir.iterdir()):
        if not child.is_dir():
            continue
        if child.name.startswith('.'):
            continue

        files = {p.name for p in child.iterdir() if p.is_file()}
        has_main = 'main.py' in files
        has_tools = 'tools.py' in files
        has_engine = any(n.endswith('_engine.py') or n.endswith('_v2_engine.py') or 'engine' in n for n in files)

        results[child.name] = {
            'path': str(child),
            'has_main_py': has_main,
            'has_tools_py': has_tools,
            'has_engine_py': has_engine,
            'files': sorted(files),
        }

    return results


def create_wrapper_main(agent_path: Path) -> None:
    target = agent_path / 'main.py'
    if target.exists():
        print(f'Skipping {target}: already exists')
        return
    target.write_text(WRAPPER_TEMPLATE)
    print(f'Created wrapper: {target}')


def main(argv: List[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--create-wrappers', action='store_true', help='Create safe wrapper main.py files for agents missing main.py')
    args = parser.parse_args(argv)

    agents_dir = AGENTS_DIR
    print(f'Scanning agents directory: {agents_dir}')
    report = scan_agents(agents_dir)

    missing_main = []
    for name, info in report.items():
        status = []
        status.append('main.py' if info['has_main_py'] else 'NO main.py')
        status.append('tools.py' if info['has_tools_py'] else 'NO tools.py')
        status.append('engine' if info['has_engine_py'] else 'NO engine')
        print(f"- {name}: {', '.join(status)}")
        if not info['has_main_py']:
            missing_main.append(name)

    print('\nSummary:')
    print(f'  agents scanned: {len(report)}')
    print(f'  missing main.py: {len(missing_main)}')

    if args.create_wrappers and missing_main:
        for name in missing_main:
            agent_path = agents_dir / name
            create_wrapper_main(agent_path)

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
